<!DOCTYPE html>
<html>

<head>
    <meta charset='utf-8' />
    <title>Along</title>
    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
    <script  include="jquery" src="../../libs/zondyclient/include-lib-local.js"></script>
    <script  src="../../libs/zondyclient/include-cesium-local.js"></script>
    <style>
        body {
            margin: 0;
            padding: 0;
        }

        #map {
            position: absolute;
            top: 0;
            bottom: 0;
            width: 100%;
        }
    </style>
</head>

<body>
    <div id='map'></div>
    <script>
        var viewer = new Cesium.Viewer('map');

        initMap();
        initPickEvent();
        
        function initMap() {
            /*
            * 懒人加载模式，这适用于小数据，快速展示，后面的问题多多，最好使用下面的新的模式
            */
            var redPolygon = viewer.entities.add({
                name: 'Red polygon on surface',
                polygon: {
                    hierarchy: Cesium.Cartesian3.fromDegreesArray([-115.0, 37.0, -115.0, 32.0, -107.0, 33.0, -
                        102.0, 31.0, -102.0, 35.0
                    ]),
                    material: Cesium.Color.RED
                }
            });

            var greenPolygon = viewer.entities.add({
                name: 'Green extruded polygon',
                polygon: {
                    hierarchy: Cesium.Cartesian3.fromDegreesArray([-108.0, 42.0, -100.0, 42.0, -104.0, 40.0]),
                    extrudedHeight: 500000.0,
                    material: Cesium.Color.GREEN,
                    closeTop: false,
                    closeBottom: false
                }
            });

            var orangePolygon = viewer.entities.add({
                name: 'Orange polygon with per-position heights and outline',
                polygon: {
                    hierarchy: Cesium.Cartesian3.fromDegreesArrayHeights([-108.0, 25.0, 100000, -100.0, 25.0,
                        100000, -100.0, 30.0, 100000, -108.0, 30.0, 300000
                    ]),
                    extrudedHeight: 0,
                    perPositionHeight: true,
                    material: Cesium.Color.ORANGE.withAlpha(0.5),
                    outline: true,
                    outlineColor: Cesium.Color.BLACK
                }
            });

            var bluePolygon = viewer.entities.add({
                name: 'Blue polygon with holes',
                polygon: {
                    hierarchy: {
                        positions: Cesium.Cartesian3.fromDegreesArray([-99.0, 30.0, -85.0, 30.0, -85.0, 40.0, -
                            99.0, 40.0
                        ]),
                        holes: [{
                            positions: Cesium.Cartesian3.fromDegreesArray([-97.0, 31.0, -97.0, 39.0, -
                                87.0, 39.0, -87.0, 31.0
                            ]),
                            holes: [{
                                positions: Cesium.Cartesian3.fromDegreesArray([-95.0, 33.0, -
                                    89.0, 33.0, -89.0, 37.0, -95.0, 37.0
                                ]),
                                holes: [{
                                    positions: Cesium.Cartesian3.fromDegreesArray([-
                                        93.0, 34.0, -91.0, 34.0, -91.0, 36.0, -
                                        93.0, 36.0
                                    ])
                                }]
                            }]
                        }]
                    },
                    material: Cesium.Color.BLUE.withAlpha(0.5),
                    height: 0,
                    outline: true // height is required for outline to display
                }
            });

            viewer.zoomTo(viewer.entities);

            /*
             * 新加载模式-几何图元，这适用于复杂的定制化场景，核心由三部分组成，几何实例与模型矩阵以及样式
             */
             var polygonWithHole = new Cesium.PolygonGeometry({
                polygonHierarchy: new Cesium.PolygonHierarchy(
                    Cesium.Cartesian3.fromDegreesArray([-109.0, 30.0, -95.0, 30.0, -95.0, 40.0, -109.0,
                        40.0
                    ]), [new Cesium.PolygonHierarchy(
                        Cesium.Cartesian3.fromDegreesArray([-107.0, 31.0, -107.0, 39.0, -97.0, 39.0, -
                            97.0, 31.0
                        ]), [new Cesium.PolygonHierarchy(
                            Cesium.Cartesian3.fromDegreesArray([-105.0, 33.0, -99.0, 33.0, -99.0,
                                37.0, -105.0, 37.0
                            ]), [new Cesium.PolygonHierarchy(
                                Cesium.Cartesian3.fromDegreesArray([-103.0, 34.0, -101.0, 34.0, -
                                    101.0, 36.0, -103.0, 36.0
                                ])
                            )]
                        )]
                    )]
                ),
                vertexFormat:Cesium.VertexFormat.POSITION_ONLY
            });
             var polygoninstance = new Cesium.GeometryInstance({
                geometry: polygonWithHole,
                attributes: {
                    color: new Cesium.ColorGeometryInstanceAttribute(0.0, 1.0, 1.0, 1.0)
                },
                id: "polygoninstance"
            });

            viewer.scene.primitives.add(new Cesium.Primitive({
                geometryInstances: [polygoninstance],
                appearance: new Cesium.PerInstanceColorAppearance() //EllipsoidSurfaceAppearance/PerInstanceColorAppearance请区分使用场景
            }));
        }

        function initPickEvent() {
            var handler = new Cesium.ScreenSpaceEventHandler(viewer.scene.canvas);
            handler.setInputAction(function (movement) {
                var pick = viewer.scene.pick(movement.position);
                if (Cesium.defined(pick) && (pick.id === 'polygoninstance')) {
                    console.log('Mouse clicked instance.');
                }
            }, Cesium.ScreenSpaceEventType.LEFT_CLICK);
        }
    </script>

</body>

</html>
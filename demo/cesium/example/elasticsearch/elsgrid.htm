<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>原生接口-ELS聚类</title>
  <script include="jquery,moment" src="../../libs/zondyclient/include-lib-local.js"></script>
  <script include="elasticsearch,geohash,geojson,mapv" src="../../libs/zondyclient/include-cesium-local.js"></script>
  <style>
    #mapid {
      position: absolute;
      width: 100%;
      height: 100%;
    }
  </style>
</head>

<body>
  <div id="mapid"></div>
  <script>
    var mapExtent, mapLevel, startTime, endTime, geojson;
    startTime = currentTime = Date.parse(new Date("2012-11-01 08:00:00")); //1516723200000; 毫秒
    endTime = Date.parse(new Date("2012-11-01 23:59:59")); // 1516809599000; 毫秒
    var timeSpeed = 250000; //250秒的速度
    var flashSpeed = 2000; //2秒一刷新
    
    var mapvLayer, layerDataSet, layerOptions = getLayerOptions();;

    var client = new elasticsearch.Client({
      host: 'http://192.168.96.101:9200'
    });

    var viewer = new Cesium.Viewer('mapid');

    var timer = self.setInterval("clock()", flashSpeed);

    initMap();

    //--------------------------------------------------------------------
    //-----------------下面是实际核心代码，以前都是各种样式------------------
    //--------------------------------------------------------------------
    function clock() {
      mapLevel = 16;
      loadData(mapLevel, viewer, currentTime, currentTime + timeSpeed);
      currentTime += timeSpeed;
    };

    function initMap() {
      var center = Cesium.Cartesian3.fromDegrees(116.35, 39.9, 50000.0);
      viewer.scene.camera.setView({
        destination: center
      });
    }

    function loadData(level, viewer, startTimeStamp, endTimeStamp) {
      var bound = getLatLngBounds(viewer);
      var prec = recalcLevel(level);

      client.search({
        index: 'sp_taxibj_200_2', //数据库名称
        type: "sptype",  //数据表名称
        body: {
          size: 0, //此处返回的是hits的数组大小
          query: {
            bool: {
              filter: {
                range: {
                  'GPS_DateTime': {
                    from: startTimeStamp, //毫秒转换成秒
                    to: endTimeStamp //毫秒转换成秒
                  }
                }
              }
            }
          },
          aggregations: {
            'mapExtent': {
              filter: {
                geo_bounding_box: {
                  'geometry': {
                    top_left: {
                      lat: bound.north,
                      lon: bound.west
                    },
                    bottom_right: {
                      lat: bound.sourth,
                      lon: bound.east
                    }
                  }
                }
              },
              aggregations: {
                'geohash': {
                  geohash_grid: {
                    field: "geometry",
                    precision: prec
                  }
                }
              }
            }
          }
        }
      }, getData);
    };

    function getData(error, response) {
      layerDataSet = new mapv.DataSet(convertData(response));
      updateView();
    }

    function updateView() {
      if (!mapvLayer) {
        mapvLayer = new CesiumZondy.Overlayer.MapvLayer(viewer, layerDataSet, layerOptions);
      } else {
        //mapvLayer = new CesiumZondy.Overlayer.MapvLayer(viewer, layerDataSet, layerOptions);
        mapvLayer.updateData(layerDataSet, layerOptions);
      }
    }

    function convertData(response) {
      var data = [];
      response.aggregations.mapExtent.geohash.buckets.forEach(function (bucket) {
        var coordinates = decodeGeoHash(bucket.key);
        data.push({
          geometry: {
            type: 'Point',
            coordinates: [coordinates.longitude[2], coordinates.latitude[2]]
          },
          count: bucket.doc_count
        });
      });
      return data;
    };

    function getLayerOptions() {
      return {
        fillStyle: 'rgba(55, 50, 250, 0.8)',
        shadowColor: 'rgba(255, 250, 50, 1)',
        shadowBlur: 10,
        size: 40,
        globalAlpha: 0.5,
        label: {
          show: true,
          fillStyle: 'white',
          shadowColor: 'yellow',
          font: '15px Arial',
          shadowBlur: 10
        },
        gradient: {
          0: "rgba(49, 54, 149, 0)",
          0.2: "rgba(69,117,180, 0.7)",
          0.3: "rgba(116,173,209, 0.7)",
          0.4: "rgba(171,217,233, 0.7)",
          0.5: "rgba(224,243,248, 0.7)",
          0.6: "rgba(254,224,144,0.7)",
          0.7: "rgba(253,174,97,0.7)",
          0.8: "rgba(244,109,67,0.8)",
          0.9: "rgba(215,48,39,0.8)",
          0.95: "rgba(165, 0, 38,0.8)"
        },
        draw: 'grid' //honeycomb,grid,
      }
    }

    function recalcLevel(level) {
      var prec = 5;
      if (level <= 2) {
        prec = 2;
      } else if (level > 2 && level <= 5) {
        prec = 4;
      } else if (level > 5 && level <= 8) {
        prec = 8;
      } else if (level > 8 && level <= 11) {
        prec = 9;
      } else if (level > 11 && level <= 13) {
        prec = 10;
      } else if (level > 13 && level <= 15) {
        prec = 11;
      } else if (level > 15) {
        prec = 12;
      };
      return prec;
    }

    function getLatLngBounds(viewer) {

      var right_bottom = new Cesium.Cartesian2(viewer.canvas.width, viewer.canvas.height);
      var left_top = new Cesium.Cartesian2(0, 0);

      var ray = viewer.camera.getPickRay(right_bottom);
      var intersection = viewer.scene.globe.pick(ray, viewer.scene);
      var east_sourth = Cesium.Cartographic.fromCartesian(intersection, Cesium.Ellipsoid.WGS84)
      ray = viewer.camera.getPickRay(left_top);
      intersection = viewer.scene.globe.pick(ray, viewer.scene);
      var west_north = Cesium.Cartographic.fromCartesian(intersection, Cesium.Ellipsoid.WGS84)

      var bound = {
        west: Cesium.Math.toDegrees(west_north.longitude),
        east: Cesium.Math.toDegrees(east_sourth.longitude),
        sourth: Cesium.Math.toDegrees(east_sourth.latitude),
        north: Cesium.Math.toDegrees(west_north.latitude)
      }
      console.log(bound)
      return bound;
    }
  </script>
</body>

</html>
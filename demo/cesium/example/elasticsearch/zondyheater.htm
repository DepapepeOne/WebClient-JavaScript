<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>中地封装接口-ELS聚类</title>
  <script include="jquery,moment" src="../../libs/zondyclient/include-lib-local.js"></script>
  <script include="datastore,geohash,geojson,mapv" src="../../libs/zondyclient/include-cesium-local.js"></script>
  <style>
    #mapid {
      position: absolute;
      width: 100%;
      height: 100%;
    }
  </style>
</head>

<body>
  <div id="mapid"></div>
  <script>
    var mapExtent, mapLevel, startTime, endTime, timeSpeed, flashSpeed, currentTime, geojson;
    startTime = currentTime = Date.parse(new Date("2012/11/1 10:44:00")); //1516723200000; 毫秒
    endTime = Date.parse(new Date("2012/12/14 08:10:00")); // 1516809599000; 毫秒
    timeSpeed = 60000; //10分钟的速度
    flashSpeed = 2000; //2秒一刷新

    var queryOptions = getQueryOptions(), layerOptions = getLayerOptions();

    var viewer = new Cesium.Viewer('mapid');
    var timer = self.setInterval("clock()", flashSpeed);

    initMap();

    //--------------------------------------------------------------------
    //-----------------下面是实际核心代码，以前都是各种样式------------------
    //--------------------------------------------------------------------
    function clock() {
      mapLevel = 14;
      currentTime = currentTime + timeSpeed;
      loadData(mapLevel, viewer, currentTime, currentTime + timeSpeed);
    };

    function initMap() {
      var center = Cesium.Cartesian3.fromDegrees(116.35, 39.9, 50000.0);
      viewer.scene.camera.setView({
        destination: center
      });
    }

    function loadData(level, viewer, startTimeStamp, endTimeStamp) {
      var bound = getLatLngBounds(viewer);
      var prec = recalcLevel(level);

      queryOptions.space.percision = prec;
      queryOptions.space.west = bound.west;
      queryOptions.space.east = bound.east;
      queryOptions.space.north = bound.north;
      queryOptions.space.south = bound.south;

      queryOptions.time.starttime = startTimeStamp;
      queryOptions.time.endtime = endTimeStamp;

      var layer = new CesiumZondy.ElasticSearch.GeoHashService("192.168.91.125", "9093", viewer, queryOptions, layerOptions, function (result,
        start, end) {
        console.log(result);
      });
    };

    function getQueryOptions() {
      return {
        db: "sp_taxibj_200_2",
        table: "sptype",
        space: {
          field: "geometry",
          percision: 12,
          west: -180,
          east: 180,
          north: 90,
          south: -90
        },
        time: {
          field: "GPS_DateTime",
          starttime: "00000",
          endtime: "10000"
        }
      }
    }

    function getLayerOptions() {
      return {
        size: 20,
        gradient: {
          0: "rgba(49, 54, 149, 0)",
          0.2: "rgba(69,117,180, 0.7)",
          0.3: "rgba(116,173,209, 0.7)",
          0.4: "rgba(171,217,233, 0.7)",
          0.5: "rgba(224,243,248, 0.7)",
          0.6: "rgba(254,224,144,0.7)",
          0.7: "rgba(253,174,97,0.7)",
          0.8: "rgba(244,109,67,0.8)",
          0.9: "rgba(215,48,39,0.8)",
          0.95: "rgba(165, 0, 38,0.8)"
        },
        draw: 'heatmap'
      };
    }

    function recalcLevel(level) {
      var prec = 5;
      if (level <= 2) {
        prec = 2;
      } else if (level > 2 && level <= 5) {
        prec = 4;
      } else if (level > 5 && level <= 8) {
        prec = 8;
      } else if (level > 8 && level <= 11) {
        prec = 9;
      } else if (level > 11 && level <= 13) {
        prec = 10;
      } else if (level > 13 && level <= 15) {
        prec = 11;
      } else if (level > 15) {
        prec = 12;
      };
      return prec;
    }

    function getLatLngBounds(viewer) {

      var right_bottom = new Cesium.Cartesian2(viewer.canvas.width, viewer.canvas.height);
      var left_top = new Cesium.Cartesian2(0, 0);

      var ray = viewer.camera.getPickRay(right_bottom);
      var intersection =  viewer.scene.globe.pick(ray, viewer.scene);
      var east_south = Cesium.Cartographic.fromCartesian(intersection, Cesium.Ellipsoid.WGS84)
      ray = viewer.camera.getPickRay(left_top);
      intersection =  viewer.scene.globe.pick(ray, viewer.scene);
      var west_north = Cesium.Cartographic.fromCartesian(intersection, Cesium.Ellipsoid.WGS84)

      var bound = {
        west: Cesium.Math.toDegrees(west_north.longitude),
        east: Cesium.Math.toDegrees(east_south.longitude),
        south: Cesium.Math.toDegrees(east_south.latitude),
        north: Cesium.Math.toDegrees(west_north.latitude)
      }

      return bound;
    }
  </script>
</body>

</html>
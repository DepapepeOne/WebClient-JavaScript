<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>加载KML数据</title>
    <meta charset='utf-8' />
    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
    <!--引入第三方的jquery脚本库-->
    <script include="jquery" src="../../libs/zondyclient/include-lib-local.js"></script>
    <script src="../../libs/zondyclient/include-mapboxgl-local.js"></script>
    <!--引入当前页面样式表-->
    <link href="../../css/mapboxgl/style.css" rel="stylesheet" type="text/css" />
</head>
<body>
    <div id='map'>
    </div>
    <script type="text/javascript">
        //使用严格模式
        "use strict";
        var map;
        //实例化要加载的source来源对象
        var osm = {
            //来源类型为栅格瓦片
            "type": "raster",
            'tiles': [
                 //来源请求地址
               "http://c.tile.openstreetmap.org/{z}/{x}/{y}.png"
            ],
            //栅格瓦片的分辨率
            'tileSize': 256
        };
        map = new mapboxgl.Map({
            //地图容器div的id
            container: 'map',
            //设置地图样式信息
            style: {
                //设置版本号，一定要设置
                "version": 8,
                //添加来源
                "sources": {
                    "osm": osm
                },
                //设置加载并显示来源的图层信息
                "layers": [
                    {
                        //图层id，要保证唯一性
                        "id": "OSMLayer",
                        //图层类型
                        "type": "raster",
                        //图层来源
                        "source": "osm",
                        //图层最小缩放级数
                        "minzoom": 0,
                        //图层最大缩放级数
                        "maxzoom": 22
                    },

                ],
            },
            //地图中心点
            center: [-122.0839455556771, 37.42169364237603],
            //地图当前缩放级数
            zoom: 16,
            //倾斜角度，与屏幕面的夹角（0-60）度
            pitch: 30
        });

        /**
        解析kml，注意需要在IIS的applicationhost.config文件中的添加后缀过滤方能解析
        */
        $.ajax({
            url: "../../data/kml/KML_Samples.kml",
            type: "GET",
            dataType: 'xml',
            success: function (xml) {
                if ($(xml).find("Polygon").length != 0) {
                    var pjsonArray = new Array();
                    $(xml).find("Polygon").find("outerBoundaryIs").each(function (i) {
                        var polygon = new Array();
                        var polyonjson = new Object();
                        if ($(this).parent().find("innerBoundaryIs").length != 0) {
                            //将坐标点集转换为顺时针方向
                            var outpolygonarray = $(this).find("coordinates").text().split("\n").reverse();
                            var outpolygon = new Array();
                            for (var i = 0; i < outpolygonarray.length; i++) {
                                var coordinate = [outpolygonarray[i].split(",")[0] * 1, outpolygonarray[i].split(",")[1] * 1];
                                outpolygon.push(coordinate);
                            }
                            polygon.push(outpolygon);
                            //坐标点集默认为逆时针方向
                            var inpolygonarray = $(this).parent().find("innerBoundaryIs").find("coordinates").text().split("\n");
                            var inpolygon = new Array();
                            for (var i = 0; i < inpolygonarray.length; i++) {
                                var coordinate = [inpolygonarray[i].split(",")[0] * 1, inpolygonarray[i].split(",")[1] * 1];
                                inpolygon.push(coordinate);
                            }
                            polygon.push(inpolygon);
                        }
                        else {
                            var polygonarray = $(this).find("coordinates").text().split("\n");
                            var outpolygon = new Array();
                            for (var i = 0; i < polygonarray.length; i++) {
                                var coordinate = [polygonarray[i].split(",")[0] * 1, polygonarray[i].split(",")[1] * 1];
                                outpolygon.push(coordinate);
                            }
                            polygon.push(outpolygon);
                        }
                        //默认透明度
                        var a = 1;
                        //默认颜色
                        var rgb = "#00FF00";
                        if ($(this).parent().parent().find("styleUrl").length != 0) {
                            var styleid = $(this).parent().parent().find("styleUrl").text().replace('#', '');
                            if ($(xml).find("Style").length != 0) {
                                $(xml).find("Style").each(function (i) {
                                    if ($(this).attr("id") == styleid) {
                                        if ($(this).find("PolyStyle").find("color").length != 0) {
                                            var color = $(this).find("PolyStyle").find("color").text();
                                            a = (parseInt(color.toString().substring(0, 2), 16) / 255).toFixed(1) * 1;
                                            rgb = '#' + color.toString().substring(2, color.length);

                                        }
                                    }
                                })
                            }
                        }
                        polyonjson.a = a;
                        polyonjson.color = rgb;
                        polyonjson.polygon = polygon;
                        pjsonArray.push(polyonjson);

                    });
                    var polygongeojson = GeoJSONParse(pjsonArray);
                    map.on('load', function () {
                        //添加区图层
                        map.addLayer({
                            "id": "geopolygon",
                            "type": "fill",
                            "source": {
                                "type": "geojson",
                                "data": polygongeojson
                            },
                            "layout": {
                                //是否可见  visible / none
                                "visibility": "visible" 
                            },
                            "paint": {
                                //抗锯齿，true表示针对边界缝隙进行填充
                                "fill-antialias": true,
                                //颜色
                                "fill-color": ['get', 'color'],
                                //透明度
                                "fill-opacity": ['get', 'a'],
                                //边线颜色，没错,确实没有边线宽度这个选项
                                "fill-outline-color": "#FFFF00"
                            }
                        });
                    });
                }
                if ($(xml).find("LineString").length != 0) {
                    var ljsonArray = new Array();
                    $(xml).find("LineString").find("coordinates").each(function (i) {
                        var linearray = $(this).text().split("\n");
                        var rtejson = new Object();
                        var line = new Array();
                        for (var i = 0; i < linearray.length; i++) {
                            var coordinate = [linearray[i].split(",")[0] * 1, linearray[i].split(",")[1] * 1];
                            line.push(coordinate);
                        }
                        //默认线宽
                        var width = 2;
                        //默认颜色
                        var rgb = "#00FFFF";
                        if ($(this).parent().parent().find("styleUrl").length != 0) {
                            var styleid = $(this).parent().parent().find("styleUrl").text().replace('#', '');
                            if ($(xml).find("Style").length != 0) {
                                $(xml).find("Style").each(function (i) {
                                    if ($(this).attr("id") == styleid) {
                                        if ($(this).find("LineStyle").find("color").length != 0) {
                                            var color = $(this).find("LineStyle").find("color").text();
                                            rgb = '#' + color.toString().substring(2, color.length);
                                        }
                                        if ($(this).find("LineStyle").find("width").length != 0) {
                                            width = $(this).find("LineStyle").find("width").text() * 1;
                                        }
                                    }
                                })
                            }
                        }
                        rtejson.width = width;
                        rtejson.color = rgb;
                        rtejson.line = line;
                        ljsonArray.push(rtejson);
                    });
                    var linegeojson = GeoJSONParse(ljsonArray);
                    map.on('load', function () {
                        //添加线图层
                        map.addLayer({
                            "id": "lines",
                            "type": "line",
                            "source": {
                                "type": "geojson",
                                "data": linegeojson
                            },
                            "layout": {
                                //线头的样式，butt尖头，round圆头，square平头
                                "line-cap": "square",
                                //折线的连接样式，bevel平拐，round圆拐，miter棱拐
                                "line-join": "round",
                                //是否可见 'visible'可见，'none'不可见
                                "visibility": "visible",
                            },
                            "paint": {
                                //线宽
                                "line-width": ['get', 'width'],
                                //颜色
                                "line-color": ['get', 'color'],
                                //透明度
                                "line-opacity": 1
                            }
                        });
                    });
                }
                if ($(xml).find("Point").length != 0) {
                    var pjsonArray = new Array();
                    $(xml).find("Point").find("coordinates").each(function (i) {
                        var wptjson = new Object();
                        //获取纬度
                        var lat = $(this).text().split(",")[1];
                        //获取经度
                        var lon = $(this).text().split(",")[0];
                        var coordinate = [lon * 1, lat * 1];
                        wptjson.coordinate = coordinate;
                        pjsonArray.push(wptjson);
                    });
                    var pointgeojson = GeoJSONParse(pjsonArray);
                    map.on('load', function () {
                        //添加point
                        map.addLayer({
                            "id": "points",
                            "type": "circle",
                            "source": {
                                "type": "geojson",
                                "data": pointgeojson,
                            },
                            "paint": {
                                //半径
                                "circle-radius": 5,
                                //颜色
                                "circle-color": "#FF0000",
                                //透明度
                                "circle-opacity": 0.8,
                                //轮廓线宽度
                                "circle-stroke-width": 1,
                                //轮廓线颜色
                                "circle-stroke-color": "#0000FF",
                                //轮廓线透明度
                                "circle-stroke-opacity": 0.7 
                            }
                        });
                    });
                }
            },
            error: function () { alert("加载失败"); }
        });
        
        /**
        解析成geojson
        */
        function GeoJSONParse(jsonArray) {
            var features = new Array();
            for (var i = 0; i < jsonArray.length; i++) {
                var feature = new Object();
                feature["type"] = "Feature";
                var geometry = new Object();
                for (var key in jsonArray[i]) {
                    if (key == "coordinate") {
                        geometry["type"] = "Point";
                        geometry["coordinates"] = jsonArray[i][key];
                        feature["geometry"] = geometry;
                    }
                    else if (key == "line") {
                        geometry["type"] = "LineString";
                        geometry["coordinates"] = jsonArray[i][key];
                        feature["geometry"] = geometry;
                    }
                    else if (key == "polygon") {
                        geometry["type"] = "Polygon";
                        geometry["coordinates"] = jsonArray[i][key];
                        feature["geometry"] = geometry;

                    }
                    else {
                        var properties = new Object();
                        properties[key] = jsonArray[i][key];
                        feature.properties = properties;
                    }

                }
                features.push(feature);
            }
            var geojson = {
                "type": "FeatureCollection",
                "features": features
            };
            return geojson;
        }
    </script>
</body>
</html>

<!DOCTYPE html>

<head>
  <title>电力线</title>
  <script
    include="jquery"
    src="../../libs/zondyclient/include-lib-local.js"
  ></script>
  <script
    include=""
    src="../../libs/zondyclient/include-mapboxgl-local.js"
  ></script>
  <style>
    body,
    html {
      width: 100%;
      height: 100%;
      margin: 0;
    }

    #map {
      width: 100%;
      height: 100%;
    }
  </style>
</head>

<body>
  <div id="map" class="map"></div>

  <script>
    //mapbox服务数据的访问令牌，若使用mapbox提供的样式必须要设置令牌
    mapboxgl.accessToken =
      "pk.eyJ1Ijoid29ya2luZ2RvZyIsImEiOiJjamQyZmszenczMHRoMzRuczVzaGthbGhnIn0.HTkYTE-R82N3azqscSyHkA";

    var origin = [4.861585, 36.067897, 1000];

    var map = new mapboxgl.Map({
      container: "map",
      style: "mapbox://styles/mapbox/light-v9",
      center: origin,
      zoom: 13,
      pitch: 60,
      heading: 41,
      hash: true
    });

    var ElectricLine;
    var ElectricLineInfo = [];

    var ElectricLineLayer = {
      id: "electricline",
      type: "custom",

      onAdd: function(map, gl) {
        var vertexSource =
          "\n" + //顶点着色器
          "uniform mat4 u_matrix;\n" + // fragment 变换矩阵，用来传输一致不变的数据
          "attribute vec2 a_position;\n" + // vectex 位置属性
          "attribute float a_pointsize;\n" + // vectex 大小属性
          "void main() {\n" +
          "    gl_Position = u_matrix * vec4(a_position, 0.0, 1.0);\n" +
          "    gl_PointSize = a_pointsize;\n" + //这行没卵用,什么情况?
          "}\n";

        var fragmentSource =
          "" + //片元着色器
          "void main() {\n" +
          "    gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n" +
          "}\n";

        var vertexShader = gl.createShader(gl.VERTEX_SHADER);
        gl.shaderSource(vertexShader, vertexSource);
        gl.compileShader(vertexShader);
        var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
        gl.shaderSource(fragmentShader, fragmentSource);
        gl.compileShader(fragmentShader);

        this.program = gl.createProgram();
        gl.attachShader(this.program, vertexShader);
        gl.attachShader(this.program, fragmentShader);
        gl.linkProgram(this.program);

        this.aPos = gl.getAttribLocation(this.program, "a_position"); //attribute是glsl变量，想顶点着色器传递数据
        this.aSize = gl.getAttribLocation(this.program, "a_pointsize"); //attribute是glsl变量，想顶点着色器传递数据
        this.uMatrix = gl.getUniformLocation(this.program, "u_matrix"); //uniform是glsl变量，想片元着色器传递数据
      },

      render: function(gl, matrix) {
        var count = this.initBuffer(gl, matrix);
        //console.log(ElectricLineInfo)
      },

      initBuffer: function(gl, matrix) {
        gl.useProgram(this.program);
        this.buffer = gl.createBuffer(); //创建缓冲区对象
        gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer); //将缓冲区对象绑定到目标
        gl.bufferData(gl.ARRAY_BUFFER, ElectricLine, gl.STATIC_DRAW); //向缓冲区对象写入数据

        gl.uniformMatrix4fv(this.uMatrix, false, matrix);

        gl.vertexAttribPointer(this.aPos, 2, gl.FLOAT, false, 0, 0); //将缓冲区对象分配给aPos
        gl.vertexAttrib1f(this.aSize, 2.5);
        gl.enableVertexAttribArray(this.aPos); //链接aPos变量与分配给他的缓冲区对象

        gl.enable(gl.BLEND);
        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);

        this.drawElectriLine(gl, matrix);
      },

      drawElectriLine: function(gl, matrix) {
        this.drawElectriBaseLine(gl, matrix);
        this.drawElectriBasePoint(gl, matrix);
        this.drawElectriArrowStart(gl, matrix);
        this.drawElectriArrowEnd(gl, matrix);
      },

      drawElectriBaseLine: function(gl, matrix) {
        ElectricLineInfo.forEach(function(line, index) {
          gl.drawArrays(gl.LINE_STRIP, line.start, line.count);
        });
      },

      drawElectriBasePoint: function(gl, matrix) {
        ElectricLineInfo.forEach(function(line, index) {
          gl.drawArrays(gl.POINTS, line.start, line.count);
        });
      },

      drawElectriArrowStart: function(gl, matrix) {
        ElectricLineInfo.forEach(function(line, index) {
          //calPos(&pBuffer[i-1],&pBuffer[i],dSym2ArrSpace,&dot.x,&dot.y);
          gl.drawArrays(gl.POINTS, line.start, line.count);
        });
      },

      drawElectriArrowEnd: function(gl, matrix) {
        // ElectricLineInfo.forEach(function (line, index) {
        //     gl.drawArrays(gl.POINTS, line.start, line.count);
        // });
      },

      calPos: function(dot1, dot2, len) {
        var x, y;
        var EPS = 10000;
        len = 10000;
        if (Math.abs(dot1.y - dot2.y) < EPS) {
          x = dot1.x + (dot1.x > dot2.x ? -len : len);
          y = dot1.y;
        } else if (fabs(dot1.x - dot2.x) < EPS) {
          x = dot1.x;
          y = dot1.y + (dot1.y > dot2.y ? -len : len);
        } else {
          var k = (dot1.x - dot2.x) / (dot1.y - dot2.y);
          var y1, y2, y3;
          y1 = dot1.y - sqrtl((len * len) / (k * k + 1));
          y2 = dot1.y + sqrtl((len * len) / (k * k + 1));
          y3 = dot1.y;
          y = dot1.y > dot2.y ? y1 : y2;
          x = dot1.x - k * (y3 - y);
        }
        return { x: x, y: y };
      }
    };

    map.on("style.load", function() {
      var allCount = 0;
      $.get("../../data/military/电力线.json", function(lines) {
        lines.features.forEach(function(feature, lineIndex) {
          var line = feature.geometry.coordinates;
          ElectricLineInfo.push({
            start: allCount,
            count: line.length
          });
          allCount += line.length * 2;
        });
        ElectricLine = new Float32Array(allCount);
        var allIndex = 0;
        lines.features.forEach(function(feature, lineIndex) {
          var line = feature.geometry.coordinates;
          line.forEach(function(item, index) {
            var mercator = mapboxgl.MercatorCoordinate.fromLngLat({
              lng: item[0],
              lat: item[1]
            });
            ElectricLine[index * 2 + 0 + allIndex] = mercator.x;
            ElectricLine[index * 2 + 1 + allIndex] = mercator.y;
          });
          allIndex += 2 * line.length;
        });
        map.addLayer(ElectricLineLayer);
      });
    });
  </script>
</body>

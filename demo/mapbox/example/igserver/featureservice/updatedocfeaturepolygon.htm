<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<title>地图文档区要素更新</title>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	<script include="jquery" src="../../libs/zondyclient/include-lib-local.js"></script>
    <script include="transform" src="../../libs/zondyclient/include-mapboxgl-local.js"></script>
    <!--引入当前页面样式表-->
    <link href="../../css/mapboxgl/style.css" rel="stylesheet" type="text/css" />
	<script>
		// 使用严格模式
		"use strict";
        // 定义地图容器全局变量
        var map;
        // 定义地图文档全局变量
        var mapDocLayer;
		//select标签中选择的要素id
		var featureSelect;
		//要素的外包矩形中心缓存数组
		var pntArr = new Array();
		//要素的子图符号缓存数组
		var symbolArr = new Array();
		//要素缓存数组
		var objArr = new Array();
		//要素颜色
		var symbolColor;
		// 要素的几何信息
		var featureObj;
		//地图文档guid
		var guid;
		/**显示地图
		*/
		function init() {
			//随机生成一个guid
			guid = Math.floor(Math.random() * 10000000).toString();
			// 创建地图容器
			map = new mapboxgl.Map({
				// 地图显示的div容器
				container: 'mapCon',
				// 设置地图不连续显示
				renderWorldCopies: false
			});
			// 创建地图文档图层,WorldWebMKTEdit为IGServer上发布的地图文档服务名称
			mapDocLayer = new Zondy.Map.MapDocLayer("WorldWebMKTEdit",{
				// IGServer所在ip地址
				ip: 'develop.smaryun.com',
				// IGServer请求端口号
				port: '6163',
				//添加guid
				guid: guid
			});
			// 将地图文档图层添加到地图
			mapDocLayer.addToMap(map);
			// 获取所有要素列表
			initFeatureIds();
		}

		/**执行区更新功能
		*/
		function updateRegion() {
			//获取当前选择的要素编号
			var featureIds = $("#featureID").find("option:selected").text();
			if (featureIds == "请选择要素") {
				alert("请先选择要素，再进行更新!");
				return;
			}
			if (featureObj != null) {
				//如果没有获取到子图符号，则直接返回
				if (symbolColor == null) {
					alert("没有获取到待修改元素的子图颜色！");
					return;
				}
				//如果颜色号+7后过大，超出色表最大值，则置0，否则返回“颜色号+7”
				var symColor = (symbolColor + 7) < 1502 ? (symbolColor + 7) : 0;
				//设置区要素的图形参数信息
				var cRegionInfo = new Zondy.Object.CRegionInfo({ EndColor: 1, FillColor: symColor, FillMode: 0, OutPenWidth: 1, OverMethod: 0, PatAngle: 1, PatColor: 1, PatHeight: 1, PatID: 27, PatWidth: 1 });
				//要素图形参数信息
				var graphicInfo = new Zondy.Object.WebGraphicsInfo({ InfoType: 3, RegInfo: cRegionInfo });
				//设置区要素的属性信息
				var attValue = ["esstLake", "esstLake", 1.0];
				//创建一个新的区要素
				var newFeature = new Zondy.Object.Feature({ AttValue: attValue, fGeom: featureObj, GraphicInfo: graphicInfo });
				//设置要素为区要素
				newFeature.setFType(3);
				//设置更新要素的FID
				newFeature.setFID(featureIds);
				//创建一个要素数据集
				var featureSet = new Zondy.Object.FeatureSet();
                // 属性字段个数
				var fldNumber = 3;
                // 属性字段名称
				var fldType = ["string", "string", "double"];
                // 属性字段类型
				var fldName = ["Cname", "CNTRY_NAME", "POPULATION"];
                //创建属性结构设置对象
				var cAttValue = new Zondy.Object.CAttStruct({ FldNumber: fldNumber, FldType: fldType, FldName: fldName });
				//设置要素数据集的属性结构
				featureSet.AttStruct = cAttValue;
				 //将添加的线要素添加到属性数据集中
				featureSet.addFeature(newFeature);
				// 创建文档要素编辑服务
				var editDocFeature = new Zondy.Service.EditDocFeature("WorldWebMKTEdit", 12, { ip: "develop.smaryun.com", port: "6163" });
				// 执行更新区要素功能，onPloySuccess为删除成功的回调函数
				editDocFeature.update(featureSet, onPloySuccess);
			}
		}

        /**修改区要素回调函数
        *  @param {object} rlt 获取结果对象
        */
		function onPloySuccess(rlt) {
			//停止进度条
			stopPressBar();
			var result = rlt;
			if (result) {
				alert("修改区要素成功！");
				//刷新图层前要进行此设置。加载之前的缓存文档,保证地图能正常显示
				mapDocLayer.options.keepCache = false;
				//刷新图层，实时显示地图
				mapDocLayer.refreshMap(guid);
				//设置为读取缓存，以加快显示效率
				mapDocLayer.options.keepCache = true;
                // 恢复select下拉框初始状态
                $("#featureID").val('请选择要素').attr('selected', true);
			} else {
				alert("修改区要素失败！");
			}
		}

		/**查询地图，获取活动图层中所有区要素列表
		*  @param {number} maxIndex 更新区要素的Select标签最大索引值
		*/
		function initFeatureIds(maxIndex) {
			featureSelect = $("#featureID");
			$("<option value='请选择要素'>请选择要素</option>").appendTo(featureSelect);
			if (maxIndex != null && maxIndex == 1) {
				return;
			}
			//初始化查询结构对象，设置查询结构包含几何信息
			var queryStruct = new Zondy.Service.QueryFeatureStruct();
			//是否包含几何图形信息
			queryStruct.IncludeGeometry = true;
			//是否包含属性信息
			queryStruct.IncludeAttribute = true;
			//是否包含图形显示参数
			queryStruct.IncludeWebGraphic = true;
			//实例化查询参数对象
			var queryParam = new Zondy.Service.QueryParameter({
				resultFormat: "json",
				struct: queryStruct
			});
			//设置查询要素数目
			queryParam.recordNumber = 1000;
			//实例化地图文档查询服务对象
			var queryService = new Zondy.Service.QueryDocFeature(queryParam, "WorldWebMKTEdit", 12, {
				ip: "develop.smaryun.com",
				port: "6163"
			});
			//执行查询操作，querySuccess为查询回调函数
			queryService.query(querySuccess);
		}

		/**查询成功回调函数
		*  @param {object} a 获取结果对象
		*/
		function querySuccess(a) {
			if (a.SFEleArray != null) {
				if (a.SFEleArray.length == 0) {
					alert("查询结果为空");
				}
				else {
					for (var i = 0; i < a.SFEleArray.length; i++) {
						var obj = a.SFEleArray[i];
						$("<option value='" + i + "'>" + obj.FID + "</option>").appendTo(featureSelect);
						//获取不同编号对应元素的外包络矩形及中心，用于跳转
						var featureBound = obj.bound;
						var x = 0, y = 0;
						//计算外包矩形的中心点
						x = featureBound.xmax != featureBound.xmin ? ((featureBound.xmax - featureBound.xmin) / 2 + featureBound.xmin) : featureBound.xmax;
						y = featureBound.ymax != featureBound.ymin ? ((featureBound.ymax - featureBound.ymin) / 2 + featureBound.ymin) : featureBound.ymax;
						pntArr.push([x, y]);
						//获取子图颜色
						var webGraphic = obj.GraphicInfo;
						if (webGraphic != null) {
							if (webGraphic.RegInfo != null && webGraphic.RegInfo.FillColor != null) {
								symbolArr.push(webGraphic.RegInfo.FillColor);
							}
						}
						//获取要素的几何信息
						objArr.push(obj.fGeom);
					}
				}
			}
			else {
				alert("当前地图未查到要素,请先运行对应的要素添加示例！");
			}
		}

		/**选中某一个要素编号后触发的事件，用于进行要素定位，地图跳转
		*/
		function onSelect() {
            //获取所选要素id在数组中的索引
            var index = $("#featureID").val();
            if (index == "请选择要素") {
                return;
            }
			//获取所选编号要素对应的要素几何信息
			featureObj = objArr[index];
			//获取所选编号要素对应的子图颜色
			symbolColor = symbolArr[index];
			//每修改一次子图颜色，更新一下子图颜色的缓存数组
			//这里出于执行效率问题，不采用更新一次要素就重新查询子图符号信息的做法，而是直接变更缓存数组的值
			symbolArr[index] = (symbolColor + 7) < 1502 ? (symbolColor + 7) : 0;
            //获取坐标
            var pnt = pntArr[index];
            // 将Web墨卡托坐标转换为WGS84坐标
            if(pnt[0] > 180 || pnt[0] < -180){
                pnt[0] = mercator2LonLat(pnt[0], 1).x;
            }
            if(pnt[1] > 90 || pnt[1] < -90){
                pnt[1] = mercator2LonLat(1, pnt[1]).y;
            }
            //将视图跳转到所选点要素的位置，并设置显示级数
            map.flyTo({center: pnt, zoom: 4});
		}

		/**开始进度条动画
		*/
		function startPressBar() {
			document.getElementById('preview').style.display = "";
		}

		/**停止进度条动画
		*/
		function stopPressBar() {
			document.getElementById('preview').style.display = "none";
		}
	</script>
</head>
<body onload="init()">
	<div id="preview" style="display: none; text-align: center; padding-top: 250px; font-weight: bold">
		<img src="../../img/common/39-1.gif" alt='' /><br />
		<br />
		<span>正在更新，请稍候</span>
	</div>
	<div class="ToolLib">
		请输入要更新的区要素ID：<select id="featureID" onchange="onSelect()"></select>
		<input type="button" class="ButtonLib" value="更新" onclick="updateRegion()" />
	</div>
	<div id="mapCon" style="position: absolute; width: 100%; height: 95%;"></div>
</body>
</html>
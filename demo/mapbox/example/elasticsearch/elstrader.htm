<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>leaflet显示</title>
  <script include="jquery,moment" src="../../libs/zondyclient/include-lib-local.js"></script>
  <script include="language,elasticsearch,geojson,geohash,mapv" src="../../libs/zondyclient/include-mapboxgl-local.js"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
    }

    #map {
      position: absolute;
      top: 0;
      bottom: 0;
      width: 100%;
    }
  </style>
</head>

<body>
  <div id="map"></div>
  <script>
    mapboxgl.accessToken =
      'pk.eyJ1IjoicGFybmRlZWRsaXQiLCJhIjoiY2o1MjBtYTRuMDhpaTMzbXhpdjd3YzhjdCJ9.sCoubaHF9-nhGTA-sgz0sA';
    var map = new mapboxgl.Map({
      container: 'map',
      style: 'mapbox://styles/mapbox/dark-v9',
      /* style: {
        "version": 8,
        "sources": {
          "mapbox-tiles": {
            "type": "raster",
            'tiles': [
              "https://api.tiles.mapbox.com/v4/mapbox.dark/{z}/{x}/{y}.png?access_token=sk.eyJ1IjoiY2hlbmdkYWRhIiwiYSI6ImNqZDFjaGo0ZjFzcnoyeG54enoxdnNuZHUifQ.hTWXXBUQ0wdGeuDF3GWeUw"
            ],
            'tileSize': 256
          }
        },
        "layers": [{
          "id": "dark-tiles",
          "type": "raster",
          "source": "mapbox-tiles",
          "minzoom": 0,
          "maxzoom": 22
        }]
      }, */
      zoom: 10,
      pitch: 45,
      center: [116.35, 39.9]
    });
    var startTime, currentTime;
    startTime = currentTime = Date.parse(new Date("2012-11-01 08:00:00")); //1516723200000; 毫秒
    var client = new elasticsearch.Client({
      host: 'http://192.168.96.101:9200'
    });


    map.addControl(new MapboxLanguage(), 'top-right'); //中文支持

    var mapvLayer;
    var tempCenter, tempData = [];

    var lineData = [];
    var pointData = [];
    var timeData = [];

    innerTest();

    function innerTest() {
      var bound = wrapLatLngBounds(map.getBounds());
      client.search({
        index: 'sp_taxibj_200_2', //数据库名称
        body: {
          size: 0, //此处返回的是hits的数组大小
          query: {
            bool: {
              filter: {
                range: {
                  'GPS_DateTime': {
                    from: startTime,
                    to: startTime + 600000
                  }
                }
              }
            }
          },
          aggregations: {
            'mapExtent': {
              filter: {
                geo_bounding_box: {
                  'geometry': {
                    top_left: {
                      lat: bound.getNorthWest().lat,
                      lon: bound.getNorthWest().lng
                    },
                    bottom_right: {
                      lat: bound.getSouthEast().lat,
                      lon: bound.getSouthEast().lng
                    }
                  }
                }
              },
              aggregations: {
                'geohash': {
                  geohash_grid: {
                    field: "geometry",
                    precision: 5
                  }
                }
              }
            }
          }
        }
      }, getInnerData);
    }

    function getInnerData(error, response) {
      tempCenter = {
        lng: 116.39,
        lat: 39.92
      };
      response.aggregations.mapExtent.geohash.buckets.forEach(function (bucket) {
        var coordinates = decodeGeoHash(bucket.key);
        tempData.push({
          lng: coordinates.longitude[2],
          lat: coordinates.latitude[2]
        });
      });
      convertData();
      updateView();
    }   

    function convertData() {
      tempData.forEach(function (point) {
        var curve = mapv.utilCurve.getPoints([tempCenter, point]);
        lineData.push({
          geometry: {
            type: 'LineString',
            coordinates: curve
          },
          count: 30 * Math.random()
        });

        for (j = 0; j < curve.length; j++) {
          timeData.push({
            geometry: {
              type: 'Point',
              coordinates: curve[j]
            },
            count: 1,
            time: j
          });
        }

        pointData.push({
          geometry: {
            type: 'Point',
            coordinates: [tempCenter.lng, tempCenter.lat]
          }
        });
        pointData.push({
          geometry: {
            type: 'Point',
            coordinates: [point.lng, point.lat]
          }
        });
      });

    }

    function updateView() {
      var pointOptions = {
        fillStyle: 'rgba(254,175,3,0.7)',
        shadowColor: 'rgba(55, 50, 250, 0.5)',
        shadowBlur: 10,
        size: 5,
        zIndex: 10,
        draw: 'simple'
      }
      var pointDataSet = new mapv.DataSet(pointData);
      new mapboxgl.zondy.MapvLayer(map, pointDataSet, pointOptions);

      var lineDataSet = new mapv.DataSet(lineData);
      var lineOptions = {
        strokeStyle: 'rgba(32,228,243, 0.8)',
        shadowColor: 'rgba(65,105,225, 0.8)',
        shadowBlur: 20,
        lineWidth: 3,
        zIndex: 100,
        draw: 'simple'
      }
      new mapboxgl.zondy.MapvLayer(map, lineDataSet, lineOptions);


      var timeDataSet = new mapv.DataSet(timeData);
      var timeOptions = {
        fillStyle: 'rgba(255, 250, 250, 0.5)',
        zIndex: 200,
        size: 2.5,
        animation: {
          type: 'time',
          stepsRange: {
            start: 0,
            end: 50
          },
          trails: 10,
          duration: 2,
        },
        draw: 'simple'
      }
      new mapboxgl.zondy.MapvLayer(map, timeDataSet, timeOptions);
    }

    function initData() {
      tempCenter = {
        lng: 116.39,
        lat: 39.92
      };
      tempData = [{
          lng: 116.18,
          lat: 39.72
        },
        {
          lng: 116.09,
          lat: 39.97
        },
        {
          lng: 116.17,
          lat: 40.08
        },
        {
          lng: 116.36,
          lat: 40.10
        },
        {
          lng: 116.48,
          lat: 40.01
        },
        {
          lng: 116.60,
          lat: 39.91
        },
        {
          lng: 116.56,
          lat: 39.81
        },
        {
          lng: 116.40,
          lat: 39.72
        },
        {
          lng: 116.23,
          lat: 39.84
        },
        {
          lng: 116.78,
          lat: 39.99
        },
        {
          lng: 116.26,
          lat: 39.97
        },
        {
          lng: 116.12,
          lat: 40.09
        },
        {
          lng: 116.04,
          lat: 40.00
        },
        {
          lng: 116.16,
          lat: 39.85
        },
        {
          lng: 116.24,
          lat: 39.71
        },
        {
          lng: 116.45,
          lat: 39.69
        },
        {
          lng: 116.74,
          lat: 39.68
        },
        {
          lng: 116.76,
          lat: 39.84
        },
        {
          lng: 116.63,
          lat: 39.99
        },
        {
          lng: 116.55,
          lat: 40.00
        },
        {
          lng: 116.70,
          lat: 39.98
        },
        {
          lng: 116.47,
          lat: 40.13
        },
        {
          lng: 116.21,
          lat: 40.13
        },
        {
          lng: 116.30,
          lat: 39.98
        },
        {
          lng: 116.29,
          lat: 39.93
        },
        {
          lng: 116.46,
          lat: 39.87
        },
        {
          lng: 116.42,
          lat: 39.97
        },
        {
          lng: 116.32,
          lat: 39.90
        },
        {
          lng: 116.42,
          lat: 39.86
        },
        {
          lng: 116.51,
          lat: 39.81
        },
        {
          lng: 116.26,
          lat: 39.81
        },
        {
          lng: 116.51,
          lat: 39.84
        },
        {
          lng: 116.50,
          lat: 39.92
        },
        {
          lng: 116.49,
          lat: 40.03
        },
        {
          lng: 116.54,
          lat: 39.98
        }
      ];
    }

    function wrapLatLngBounds(bound) {
      var left = bound.getWest() < -180 ? -179.99 : bound.getWest();
      var bottom = bound.getSouth() < -90 ? -89.99 : bound.getSouth();
      var right = bound.getEast() > 180 ? 179.99 : bound.getEast();
      var top = bound.getNorth() > 90 ? 89.99 : bound.getNorth();
      return new mapboxgl.LngLatBounds(
        new mapboxgl.LngLat(left, bottom),
        new mapboxgl.LngLat(right, top));
    }
  </script>
</body>

</html>
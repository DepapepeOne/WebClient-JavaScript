<!DOCTYPE html>

<head>
  <title>WebGL-基本</title>
  <script include="jquery" src="../../libs/zondyclient/include-lib-local.js"></script>
  <script src="../../libs/zondyclient/include-mapboxgl-local.js"></script>
  <style>
    body,
    html {
      width: 100%;
      height: 100%;
      margin: 0;
    }

    #map {
      width: 100%;
      height: 100%;
    }
  </style>
</head>

<body>
  <div id="map" class="map"></div>

  <script>
    //mapbox服务数据的访问令牌，若使用mapbox提供的样式必须要设置令牌
    mapboxgl.accessToken =
      "pk.eyJ1Ijoid29ya2luZ2RvZyIsImEiOiJjamQyZmszenczMHRoMzRuczVzaGthbGhnIn0.HTkYTE-R82N3azqscSyHkA";

    var origin = [30.861585, 0.00, 1000];

    var map = new mapboxgl.Map({
      container: "map",
      style: "mapbox://styles/mapbox/light-v9",
      center: origin,
      zoom: 3,
      pitch: 60,
      heading: 41,
      hash: true
    });

    var TrangleBuffer;
    var TrangleInfo = [];
    var allCount = 0;

    var BaseGlLayer = {
      id: "baseGL",
      type: "custom",

      onAdd: function (map, gl) {
        var vertexSource =
          "\n" + //顶点着色器
          "uniform mat4 u_matrix;\n" + // mapbox变换矩阵，用来传输一直不变的数据
          "attribute vec2 a_position;\n" + // vectex 位置属性
          "attribute float a_pointsize;\n" + // vectex 大小属性
          "void main() {\n" +
          "    gl_Position = u_matrix * vec4(a_position, 0.0, 1.0);\n" +
          "    gl_PointSize = a_pointsize;\n" + //这行没卵用,什么情况?
          "}\n";

        var fragmentSource =
          "" + //片元着色器
          "void main() {\n" +
          "    gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n" +
          "}\n";

        var vertexShader = gl.createShader(gl.VERTEX_SHADER);
        gl.shaderSource(vertexShader, vertexSource);
        gl.compileShader(vertexShader);
        var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
        gl.shaderSource(fragmentShader, fragmentSource);
        gl.compileShader(fragmentShader);

        this.program = gl.createProgram();
        gl.attachShader(this.program, vertexShader);
        gl.attachShader(this.program, fragmentShader);
        gl.linkProgram(this.program);

        this.aPos = gl.getAttribLocation(this.program, "a_position"); //attribute是glsl变量，向顶点着色器传递数据
        this.aSize = gl.getAttribLocation(this.program, "a_pointsize"); //attribute是glsl变量，向顶点着色器传递数据
        this.uMatrix = gl.getUniformLocation(this.program, "u_matrix"); //uniform是glsl变量，向片元着色器传递数据
      },

      render: function (gl, matrix) {
        var count = this.initBuffer(gl, matrix);
      },

      initBuffer: function (gl, matrix) {
        gl.useProgram(this.program);
        this.buffer = gl.createBuffer(); //创建缓冲区对象
        gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer); //将缓冲区对象绑定到目标
        gl.bufferData(gl.ARRAY_BUFFER, TrangleBuffer, gl.STATIC_DRAW); //向缓冲区对象写入数据

        gl.uniformMatrix4fv(this.uMatrix, false, matrix);

        gl.vertexAttribPointer(this.aPos, 2, gl.FLOAT, false, 0, 0); //将缓冲区对象分配给aPos
        gl.vertexAttrib1f(this.aSize, 5.0);
        gl.enableVertexAttribArray(this.aPos); //链接aPos变量与分配给他的缓冲区对象

        gl.enable(gl.BLEND);
        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);

        this.drawTrangle(gl, matrix);
      },

      drawTrangle: function (gl, matrix) {
        this.drawTrangleBase(gl, matrix);
        this.drawTranglePoint(gl, matrix);
      },

      drawTrangleBase: function (gl, matrix) {
        var start = 0, count = 0;
        TrangleInfo.forEach(function (triangle, index) {
          count += triangle.count;
        });
        gl.drawArrays(gl.TRIANGLES, start, count);
      },

      drawTranglePoint: function (gl, matrix) {
        var start = 0, count = 0;
        TrangleInfo.forEach(function (triangle, index) {
          count += triangle.count;
        });
        gl.drawArrays(gl.POINTS, start, count);
      }
    };

    map.on("style.load", function () {
      var triangles = [
        [{
          lng: 30,
          lat: 5
        }, {
          lng: 25,
          lat: -5
        }, {
          lng: 35,
          lat: -5
        }],
        [{
          lng: 30,
          lat: 20
        }, {
          lng: 25,
          lat: 10
        }, {
          lng: 35,
          lat: 10
        }]
      ];
      var all_count = 0;
      triangles.forEach(function (triangle) {
        all_count += triangle.length * 2;
      });

      TrangleBuffer = new Float32Array(all_count);
      var all_index = 0;
      triangles.forEach(function (triangle, triangle_index) {
        TrangleInfo.push({
          start: all_index,
          count: triangle.length
        });

        triangle.forEach(function (point, point_index) {
          var mercator = mapboxgl.MercatorCoordinate.fromLngLat({
            lng: point.lng,
            lat: point.lat
          });
          TrangleBuffer[point_index * 2 + 0 + all_index] = mercator.x;
          TrangleBuffer[point_index * 2 + 1 + all_index] = mercator.y;
        });

        all_index += 2 * triangle.length;
      });

      map.addLayer(BaseGlLayer);

    });
  </script>
</body>
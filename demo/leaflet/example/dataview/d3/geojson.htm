<!DOCTYPE html>
<html>

<head>
    <meta charset='utf-8' />
    <title>D3-geojson</title>
    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
    <script include="jquery" src="../../libs/zondyclient/include-lib-local.js"></script>
    <script include="d3" src="../../libs/zondyclient/include-leaflet-local.js"></script>
    <style>
        body {
            margin: 0;
            padding: 0;
        }

        #map {
            position: absolute;
            top: 0;
            bottom: 0;
            width: 100%;
        }

        .china-style {
            fill: red;
            fill-opacity: 0.9;
            stroke: yellow;
            stroke-width: 4;
        }
    </style>
</head>

<body>
    <div id='map'></div>
    <script>
        var map = L.map('map').setView([0, 0], 2); //这里的2级别很重要如果级别太大则无法生成对应的蜂窝格
        var mapboxTile;

        initMap();

        updateView();        

        drawSVG();        

        function initMap() {
            mapboxTile = L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=' +
                'sk.eyJ1IjoiY2hlbmdkYWRhIiwiYSI6ImNqZDFjaGo0ZjFzcnoyeG54enoxdnNuZHUifQ.hTWXXBUQ0wdGeuDF3GWeUw', {
                    attribution: '<a href="#">MapBox&MapGIS</a>',
                    maxZoom: 18,
                    id: 'mapbox.light'
                }).addTo(map);
        }

        function updateView() {
            var countries = [];

            var chinaOverlay = L.zondy.d3SvgOverlay(function (sel, proj) {

                var china = sel.selectAll('path')
                    .data(countries.filter(function (d) {
                        return d.properties.name == "China" ? true : false;
                    }));

                china.enter()
                    .append('path') //添加绘制方式为path
                    .classed("china-style", true) //绑定对应的样式
                    .attr('d', proj.pathFromGeojson); //这里是固定语法，一般不变

            }, {
                zoomDraw: false //缩放时，继续播放动画或者重新绘制
            });

            var otherOverlay = L.zondy.d3SvgOverlay(function (sel, proj) {
                var other = sel.selectAll('path')
                    .data(countries.filter(function (d) {
                        return d.properties.name != "China" ? true : false;
                    }));

                other.enter()
                    .append('path') //添加绘制方式为path
                    .attr('d', proj.pathFromGeojson) //这里是固定语法，一般不变
                    .style('stroke', function (d) {
                        return "black";
                    })
                    .style('stroke-width', function (d) {
                        return 1 / proj.scale;
                    })
                    .style('fill', function (d) {
                        return d3.hsl(Math.random() * 360, 0.9, 0.5);
                    })
                    .style('fill-opacity', '0.5');
            }, {
                zoomDraw: false //缩放时，继续播放动画或者重新绘制
            });

            L.control.layers({
                "Raster Tiles": mapboxTile
            }, {
                "China Country": chinaOverlay,
                "Other Countries": otherOverlay
            }).addTo(map);

            d3.json("../../data/d3/countries.geo.json").then(function (data) {
                countries = data.features;
                otherOverlay.addTo(map);
                chinaOverlay.addTo(map)
                //chinaOverlay.bringToBack();
                
            });
        }

        function drawSVG() {
            //下面的例子只是为了告诉你，svg无法控制图层的压盖顺序
            map.createPane('myPane1');
            map.createPane('myPane2');
            var renderer1 = L.svg();
            renderer1.options.pane = 'myPane1';
            var renderer2 = L.svg();
            renderer2.options.pane = 'myPane2';
            var drawOptions1 = {renderer: renderer1, color: "#ff0000", weight: 5};
            var drawOptions2 = {renderer: renderer2, color: "#00ff00", weight: 5};
            var bounds1 = [
                [20.559322, 60.767822],
                [40.1210604, 80.021240]
            ];
            // create an orange rectangle
            var layer1 = L.rectangle(bounds1, drawOptions1);

            var bounds2 = [
                [25.559322, 50.767822],
                [35.1210604, 90.021240]
            ];
            // create an orange rectangle
            var layer2 = L.rectangle(bounds2, drawOptions2);

            map.addLayer(layer1);
            map.addLayer(layer2);
            layer1.bringToFront();
        }
    </script>

</body>

</html>